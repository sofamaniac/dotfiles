global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def noMath():
    return vim.eval('vimtex#syntax#in_mathzone()') != '1'
endglobal

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

context "math()"
snippet '_([^_])' "subscript" wrA
_{`!p snip.rv = match.group(1)`$1}$0
endsnippet

snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "noMath()"
snippet '__(.*)__' "underline" wrA
\\underline{`!p snip.rv = match.group(1)`}
endsnippet

context "noMath()"
snippet '\*\*(.+)\*\*' "bold" wr
\\textbf{`!p snip.rv = match.group(1)`}
endsnippet

context "noMath()"
snippet '([^*])\*([^*].+[^*])\*([^*])' "emph" wr
`!p snip.rv = match.group(1)`\\emph{`!p snip.rv = match.group(2)`}`!p snip.rv = match.group(3)`
endsnippet

context "math()"
snippet "([\w\}]+)st" "star" wi
`!p snip.rv=match.group(1)`^*
endsnippet

context "math()"
snippet "([\w\}]+)td" "power" riA
`!p snip.rv=match.group(1)`^{$1}$0
endsnippet

context "math()"
snippet "\\([A-Za-z])([A-Za-z])" "mathbb" wr
`!p 
if match.group(1) == match.group(2):
	snip.rv = "\\mathbb{" + match.group(1) + "}"
else:
	snip.rv = f"\\{match.group(1)}{match.group(2)}"
`
endsnippet

context "math()"
snippet "\\c([A-Za-z])([A-Za-z])" "mathcal" wr
`!p 
if match.group(1) == match.group(2):
	snip.rv = "\\mathcal{" + match.group(1) + "}"
else:
	snip.rv = f"\\c{match.group(1)}{match.group(2)}"
`
endsnippet

snippet "\\Automaton" "draw automaton" wrA
\begin{figure}[h]
	\centering
	\begin{tikzpicture}[->,>=stealth',shorten >=1pt,auto,node distance=3.5cm,
		scale = 1,transform shape]

		\tikzstyle{initial} = 
			[initial by arrow, initial text=0, initial left]
		\tikzstyle{accepting} = 
			[accepting by arrow, accepting text=0, accepting right]
		% nodes go here, type \node to add node
		$1

		\path 
		% edges go here, type \edge to add edge
		$2
		;

	\end{tikzpicture}
	\caption*{$3}
\end{figure}
$0
endsnippet

snippet "\\node" "add node" wrA
\node[state$2] ($1) {$$1$};$0
endsnippet

snippet "\\edge" "add edge" wrA
($1)	edge 	[$4]	node	{$$2$}	($3);$0
endsnippet

snippet beg "begin{} / end{}" bA
\begin{$1}

	$0

\end{$1}
endsnippet

snippet \\sec "section{} and label{}" bA
\section{${1:SecName}} % (fold)
\label{sec:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\l$1$2$3)/g}}}

$0

% section $2 (end)
endsnippet

snippet \\sub "subsection{} and label" bA
\subsection{${1:SubName}} % (fold)
\label{sub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\l$1$2$3)/g}}}

$0

% subsection $2 (end)
endsnippet

snippet \\subs "subsubsection{} and label" bA
\subsubsection{${1:SubsubName}} % (fold)
\label{ssub:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\l$1$2$3)/g}}}

$0

% subsubsection $2 (end)
endsnippet

snippet enum "Enumerate list" b
\begin{enumerate}
	\item $1
\end{enumerate}
endsnippet

snippet item "Itemised list" bA
\begin{itemize}
	\item $1
\end{itemize}
endsnippet

snippet itm "Item line" iA
\item $1
endsnippet

snippet par "add paragraph" b
\paragraph{${1:paragraph name}} % (fold)
\label{par:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\l$1$2$3)/g}}}

$0

% paragraph $2 (end)
endsnippet

context "noMath()"
snippet \\def "Add definition" bA
\begin{definition}[$1]
	\label{def:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\l$1$2$3)/g}}}
	$2
\end{definition}
$0
endsnippet

context "noMath()"
snippet \\th "Add theorem" bA
\begin{theorem}[$1]
	\label{th:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\l$1$2$3)/g}}}
	$2
\end{theorem}
$0
endsnippet

context "noMath()"
snippet \\prop "Add property" bA
\begin{theorem}[$1]
	\label{prop:${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\l$1$2$3)/g}}}
	$2
\end{theorem}
$0
endsnippet

context "noMath()"
snippet \\example "Add examples" bA
\paragraph{Example}~
$1
endsnippet

context "math()"
snippet \\set "Create set" bA
\{ $1 \} $0
endsnippet
