global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'
endglobal

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

context "math()"
snippet '_([^_])' "subscript" wrA
_{`!p snip.rv = match.group(1)`$1}$0
endsnippet

snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet '__(.*)__' "underline" wrA
\\underline{`!p snip.rv = match.group(1)`}
endsnippet

snippet '\*\*(.+)\*\*' "bold" wrA
\\textbf{`!p snip.rv = match.group(1)`}
endsnippet
snippet '([^*])\*([^*].+[^*])\*([^*])' "emph" wrA
`!p snip.rv = match.group(1)`\\emph{`!p snip.rv = match.group(2)`}`!p snip.rv = match.group(3)`
endsnippet

context "math()"
snippet "([\w\}]+)st" "star" wiA
`!p snip.rv=match.group(1)`^*
endsnippet

context "math()"
snippet "([\w\}]+)td" "power" riA
`!p snip.rv=match.group(1)`^{$1}$0
endsnippet

context "math()"
snippet "\\([A-Za-z])([A-Za-z])" "mathbb" wrA
`!p 
if match.group(1) == match.group(2):
	snip.rv = "\\mathbb{" + match.group(1) + "}"
else:
	snip.rv = f"\\{match.group(1)}{match.group(2)}"
`
endsnippet

context "math()"
snippet "\\c([A-Za-z])([A-Za-z])" "mathcal" wrA
`!p 
if match.group(1) == match.group(2):
	snip.rv = "\\mathcal{" + match.group(1) + "}"
else:
	snip.rv = f"\\{match.group(1)}{match.group(2)}"
`
endsnippet

snippet "\\Automaton" "draw automaton" wrA
\begin{figure}[h]
	\centering
	\begin{tikzpicture}[->,>=stealth',shorten >=1pt,auto,node distance=3.5cm,
		scale = 1,transform shape]

		\tikzstyle{initial} = 
			[initial by arrow, initial text=0, initial left]
		\tikzstyle{accepting} = 
			[accepting by arrow, accepting text=0, accepting right]
		% nodes go here
		$1

		\path 
		% edges go here
		$2
		;

	\end{tikzpicture}
	\caption*{$3}
\end{figure}
$0
endsnippet

snippet "\\node" "add node" wrA
\node[state$2] ($1) {$$1$};$0
endsnippet

snippet "\\edge" "add edge" wrA
($1)	edge 	[$4]	node	{$$2$}	($3);$0
endsnippet
